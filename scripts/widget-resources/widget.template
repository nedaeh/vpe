# -*- coding: utf-8 -*-

import builtins
import sys

from PyQt4 import QtGui

from Orange.widgets import widget, gui
from Orange.widgets.settings import Setting
import neuropype.engine
from {{ node.__module__ }} import {{ node.__name__ }}


class OW{{ node.__name__ }}(widget.OWWidget):
    name = '{{ node.description().name }}'
    description = '{{ node.description().description }}'
    author = '{{ node.description().author }}'
    icon = '{{ icon }}'
    priority = {{ priority }}
    category = '{{ category|title }}'

    inputs = [{% for name, port in node.ports(direction='IN*', editable=False).items() %}
        {'name': '{{ port.verbose_name|title }}', 'type': {{ port.value_type.__module__ }}.{{ port.value_type.__name__ }}, 'handler': 'set_{{ name }}', 'flags': {{'widget.Explicit' if port.implicit else '0'}}},{% endfor %}
    ]

    outputs = [{% for name, port in node.ports(direction='*OUT', editable=False).items() %}
        {'name': '{{ port.verbose_name|title }}', 'type': {{ port.value_type.__module__ }}.{{ port.value_type.__name__ }}, 'flags': {{'widget.Explicit' if port.implicit else '0'}}},{% endfor %}
    ]

    want_main_area = False
{% for name, port in node.ports(editable=True).items() %}
    {{ name }} = Setting(None){% endfor %}

    def __init__(self):
        super().__init__()

        # Construct node instance and set default properties.
        self.node = {{ node.__name__ }}()
        settings = self.settingsHandler.pack_data(self)
        if not [k for k, v in settings.items() if v != None]:{% for name, port in node.ports(editable=True).items() %}
            super().__setattr__('{{ name }}', self.node.{{ name }}){% else %}
            pass{% endfor %}
        else:{% for name, port in node.ports(editable=True).items() %}
            self.node.{{ name }} = self.{{ name }}{% else %}
            pass{% endfor %}

        # Name of the last node property to generate an error.
        self.last_error_caused_by = ''

        # Initialize GUI controls for editing node properties.
        box = gui.widgetBox(self.controlArea, 'Properties'){% for name, port in node.ports(editable=True).items() %}
        {% if port.value_type.__name__ == 'bool' %}self.{{ name }}_control = gui.checkBox(box, self, '{{ name }}', '{{ port.verbose_name|capitalize }}', callback=lambda: self.property_changed('{{ name }}'))
        {%- else %}self.{{ name }}_control = gui.lineEdit(box, self, '{{ name }}', '{{ port.verbose_name|capitalize }}:', orientation='horizontal', enterPlaceholder=True, callback=lambda: self.property_changed('{{ name }}')){% endif %}{% endfor %}
        self.reset_button = gui.button(box, self, 'Reset defaults', autoDefault=False, callback=self.reset_default_properties)

        # Set minimum width (in pixels).
        self.setMinimumWidth(480)

    def get_property_names(self):
        return list(self.node.ports(editable=True).keys())

    def get_property_control(self, name):
        return getattr(self, '{}_control'.format(name))

    def enable_property_control(self, name):
        self.get_property_control(name).setDisabled(False)

    def disable_property_control(self, name):
        self.get_property_control(name).setDisabled(True)

    def enable_property_controls(self, names=None):
        for name in (names or self.get_property_names()):
            self.enable_property_control(name)

    def disable_property_controls(self, names=None):
        for name in (names or self.get_property_names()):
            self.disable_property_control(name)

    def reset_default_properties(self, names=None):
        node = {{ node.__name__ }}()

        for name in (names or self.get_property_names()):
            setattr(self.node, name, getattr(node, name))
            # Synchronize property changes back to the GUI.
            super().__setattr__(name, getattr(self.node, name))

    def property_changed(self, name):
        if self.last_error_caused_by and self.last_error_caused_by != name:
            return

        try:
            if self.node.port(name).value_type in (bool, str):
                value = getattr(self, name)
            else:
            # Evaluate string as pure Python code.
                value = eval(getattr(self, name))

            setattr(self.node, name, value)
            # Synchronize property changes back to the GUI.
            super().__setattr__(name, getattr(self.node, name))

            if self.last_error_caused_by:
                self.last_error_caused_by = ''
                self.error()

            self.enable_property_controls()
            self.reset_button.setDisabled(False)
        except Exception as e:
            self.disable_property_controls()
            self.reset_button.setDisabled(True)
            self.enable_property_control(name)

            if not self.last_error_caused_by:
                self.last_error_caused_by = name

            self.error(text=str(e))
{% for name, port in node.ports(direction='IN*', editable=False).items() %}
    def set_{{ name }}(self, {{ name }}):
        self.node.{{ name }} = {{ name }}
{% endfor %}

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    ow = OW{{ node.__name__ }}()
    ow.show()
    app.exec_()