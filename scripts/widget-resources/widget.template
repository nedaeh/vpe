# -*- coding: utf-8 -*-

import builtins

from Orange.widgets import widget, gui, cpewidget
from Orange.widgets.settings import Setting
import neuropype.engine
from {{ node.__module__ }} import {{ node.__name__ }}


class OW{{ node.__name__ }}(cpewidget.CPEWidget):

    # Node meta-data.
    name = "{{ node.description().name }}"
    description = "{{ node.description().description }}"
    author = "{{ node.description().author }}"
    icon = "{{ icon }}"
    priority = {{ priority }}
    category = "{{ category|title }}"

    # Input/output ports.
    inputs = [{% for name, port in node.ports(direction='IN*', editable=False).items() %}
        {'name': '{{ port.verbose_name|title }}', 'type': {{ port.value_type.__module__ }}.{{ port.value_type.__name__ }}, 'handler': 'set_{{ name }}', 'flags': {{'widget.Explicit' if port.builtin else '0'}}},{% endfor %}
    ]

    outputs = [{% for name, port in node.ports(direction='*OUT', editable=False).items() %}
        {'name': '{{ port.verbose_name|title }}', 'type': {{ port.value_type.__module__ }}.{{ port.value_type.__name__ }}, 'flags': {{'widget.Explicit' if port.implicit else '0'}}},{% endfor %}
    ]

    # Configuration properties.{% for name, port in node.ports(editable=True).items() %}
    {{ name }} = Setting(None){% endfor %}

    def __init__(self):
        # Initialize with a newly instantiated node.
        super().__init__({{ node.__name__ }}())

        # Set default properties.
        settings = self.settingsHandler.pack_data(self)
        if not [k for k, v in settings.items() if v != None]:{% for name, port in node.ports(editable=True).items() %}
            super().__setattr__('{{ name }}', self.node.{{ name }}){% else %}
            pass{% endfor %}
        else:{% for name, port in node.ports(editable=True).items() %}
            self.node.{{ name }} = self.{{ name }}{% else %}
            pass{% endfor %}

        # Initialize GUI controls for editing node properties.
        box = gui.widgetBox(self.controlArea, 'Properties'){% for name, port in node.ports(editable=True).items() %}
        {% if port.__class__.__name__ == 'BoolPort' %}self.{{ name }}_control = gui.checkBox(box, self, '{{ name }}', label='{{ port.verbose_name|capitalize }}', callback=lambda: self.property_changed('{{ name }}'), tooltip="{{ port.help }}")
        {%- elif port.__class__.__name__ == 'EnumPort'  %}self.{{ name }}_control = gui.comboBox(box, self, '{{ name }}', label='{{ port.verbose_name|capitalize }}:', items={{ port.domain }}, sendSelectedValue=True, orientation='horizontal', callback=lambda: self.property_changed('{{ name }}'), tooltip="{{ port.help }}")
        {%- else %}self.{{ name }}_control = gui.lineEdit(box, self, '{{ name }}', label='{{ port.verbose_name|capitalize }}:', orientation='horizontal', callback=lambda: self.property_changed('{{ name }}'), tooltip="{{ port.help }}"){% endif %}{% endfor %}
        self.reset_button = gui.button(box, self, 'Reset defaults', autoDefault=False, callback=self.reset_default_properties)

    # Port setters.{% for name, port in node.ports(direction='IN*', editable=False).items() %}
    def set_{{ name }}(self, {{ name }}):
        self.node.{{ name }} = {{ name }}
{% endfor %}
